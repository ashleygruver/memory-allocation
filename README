Jacob Gruver - jgruver - U28848866
Richard Xiao - richardx - U38118540

Jacob - Regular Heap management
Heap edge cases:
Heap sizes are rounded up to the nearest multiple of 8
A heap cannot be allocated without at least 24 bytes of memory allocated. Attempts to do so will result in Init returning without
initilizing the heap
Attempts to Malloc 0 bytes will result in a null pointer return
Any free blocks of 8 bytes will be incorperated as internal fragmentation
All alignment based fragmentation is internal to the 
Size in the header and footer includes the header and footer size. e.g. if i points to the header, i+size points to the header of the next element in the heap.
When passed a null pointer, free and get will do nothing, when passed a pointer that is neither null nor a valid free target, behavior is unpredictable
Total data structure size: 8*allocated blocks + 8 bytes all included in the heap request

Heap checker edge cases:
The Heapchecker may fail in heaps larger than 1024KB
Any processes needed for the Heapchecker are excluded from the time counter
Allocated heap size does not include data structures. Only allocated bytes and internal fragmentation
All alignment fragmentation is internal, therefore total free bytes and raw free bytes are the same value
Failed mallocs and frees are included in the time average
Average times will not print if there have been no calls

Richard (Virtual Heap Management)
VHeap edge cases:
> Heap sizes are rounded up to the nearest multiple of 8
> Heap size is actually +16 than the size passed in VInit() due to data structures
> A heap can only have up to 65536 entries, the size of the redirection table 
> Attempts to VMalloc entries over the table size results in a null pointer
> Attempts to VMalloc 0 bytes results in a null pointer
> Attempts to VFree an empty VHeap results in nothing happening
> Attempts to VFree an address outside of the table results in nothing happening

Heap Check edge cases:
> Any processes needed for the Heap Check are excluded from the time counter
> Allocated heap size does not include data structures. Only allocated bytes and internal fragmentation are counted.
> All alignment fragmentation is internal, therefore total free bytes and raw free bytes are the same value
> Failed VMalloc and VFrees are included in the time average
> Average times will not print if there have been no calls
(Citation: you can see where this one is from)
